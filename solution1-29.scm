#lang sicp
(define (cube x)
  (* x x x))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (simpson f a b n)
  (let ((h (/ (- b a) n)))
  (define (inc x)
    (+ x 1))
  (define (yk k)
    (cond ((odd? k) (* 4 (f (+ a (* k h)))))
          ((= k 0) (f (+ a (* k h))))
          ((= k n) (f (+ a (* k h))))
          (else (* 2 (f (+ a (* k h)))))))
  (* (/ h 3) (sum yk 0 inc n))))

(simpson cube 0 1 100)