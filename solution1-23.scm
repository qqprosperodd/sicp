#lang sicp
(define (smallest-divisor n)
  (find-divisor n 2))
(define (next x)
  (cond ((= x 2) (+ x 1))
        (else (+ x 2))))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (square x)
  (* x x))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
;
;
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes start max-primes)
  (define (primes-from n count)
    (cond ((zero? count) nil)
          ((prime? n) (timed-prime-test n) (newline) (cons n (primes-from (+ n 2) (- count 1))))
          (else (primes-from (+ n 2) count))))
  (primes-from (if (even? start) 
                   (+ 1 start) 
                   start)
               max-primes))


(display (search-for-primes 1000 3))
(display (search-for-primes 10000 3))
(display (search-for-primes 100000 3))
(display (search-for-primes 1000000 3))
(display (search-for-primes 10000000 3))
(display (search-for-primes 100000000 3))
(display (search-for-primes 1000000000 3))
(display (search-for-primes 10000000000 3))